# This GitHub Actions workflow validates pull requests by executing a series of tasks to ensure code quality and compatibility with Salesforce Orgs.
name: pr-validation-workflow

on:
  # This workflow contains a single job called "pr-validation"
  workflow_call:
    inputs:
      # Specifying the required inputs for this reusable workflow
      WORKFLOW_TYPE:
        required: true
        type: string
      AUTH_ORG_ALIAS:
        required: true
        type: string
      BASE_BRANCH:
        required: true
        type: string

    # Specifying the required secrets for this reusable workflow
    secrets:
      SECRET_URL_PATH:
        required: true
      DOCKER_HUB_UN:
        required: true
      DOCKER_HUB_PW:
        required: true

jobs:
  pr-validation:
    name: ${{ github.event.pull_request.head.ref }} --> ${{ github.event.pull_request.base.ref }}
    runs-on: ubuntu-latest

    # Setting some environment variables so that it can be utilized in upcoming shell scripts
    env:
      WORKFLOW_TYPE: ${{ inputs.WORKFLOW_TYPE }}
      AUTH_ORG_ALIAS: ${{ inputs.AUTH_ORG_ALIAS }}
      BASE_BRANCH: ${{ inputs.BASE_BRANCH }}
      SECRET_URL_PATH: ${{ secrets.SECRET_URL_PATH }}
      SFDX_DISABLE_DNS_CHECK: true
      FORCE_SHOW_SPINNER: true

    # Docker container load
    container:
      image: kpck/sfdx-cli-image
      credentials:
        username: ${{ secrets.DOCKER_HUB_UN }}
        password: ${{ secrets.DOCKER_HUB_PW }}

    # Steps represent a sequence of tasks that will be executed as part of the job.
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Authenticate with the Org
      - name: Salesforce Authentication
        run: chmod +x ./cicd-utils/scripts-util/authenticateorg.sh && ./cicd-utils/scripts-util/authenticateorg.sh
        shell: bash

      # Generate Delta Package
      - name: Delta Package Generation
        run: chmod +x ./cicd-utils/scripts-util/generatedeltapkg.sh && ./cicd-utils/scripts-util/generatedeltapkg.sh
        shell: bash

      # Instantiate static code scan using PMD
      - name: Static Code Analysis (PMD)
        run: chmod +x ./cicd-utils/scripts-util/scanner.sh && ./cicd-utils/scripts-util/scanner.sh
        shell: bash

      # Dynamically generate test class list
      - name: Test Class List Generation
        run: chmod +x ./cicd-utils/scripts-util/generatetestclass.sh && bash cicd-utils/scripts-util/generatetestclass.sh
        shell: bash

      # Validate the components & test class coverage
      - name: Component Validation
        run: chmod +x ./cicd-utils/scripts-util/validateComponents.sh && ./cicd-utils/scripts-util/validateComponents.sh
        shell: bash

      # Upload Artifacts
      - name: Publish Results (Uplaod Artifacts)
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: Build-Report
          path: pipeline-artifacts
